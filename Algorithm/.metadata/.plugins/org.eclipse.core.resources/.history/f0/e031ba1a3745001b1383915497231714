import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class 백조의호수_3197 {
	static class Node {
		int r;
		int c;

		Node(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int R = sc.nextInt();
		int C = sc.nextInt();

		char[][] map = new char[R][C];

		Queue<Node> swan = new LinkedList<>();

		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				map[i][j] = sc.next().charAt(0);
				if (map[i][j] == 'L') {
					swan.add(new Node(i, j));
				}
			}
		}

		int[] dr = { 0, 0, 1, -1 };
		int[] dc = { 1, -1, 0, 0 };

		int result = 0;

		while (true) {
			result++;
			
			//백조 이동
			boolean[][] check = new boolean[R][C];
			
			while(!swan.isEmpty()) {
				Node buf = swan.poll();
				
				for (int d = 0; d < 4; d++) {
					int cr = buf.r + dr[d];
					int cc = buf.c + dc[d];

					if (cr < 0 || cc < 0 || cr >= R || cc >= C || check[cr][cc])
						continue;

					if (map[cr][cc] == 'X') {
						map[cr][cc] = '.';
					}

				}
			}
					
					
			// 빙판 녹이기
			for (int i = 0; i < R; i++) {
				for (int j = 0; j < C; j++) {

					if (map[i][j] == '.') {

						for (int d = 0; d < 4; d++) {
							int cr = i + dr[d];
							int cc = j + dc[d];

							if (cr < 0 || cc < 0 || cr >= R || cc >= C)
								continue;

							if (map[cr][cc] == 'X') {
								map[cr][cc] = '.';
							}

						}
					}

				}
			}
			
			
		}

	}
}
